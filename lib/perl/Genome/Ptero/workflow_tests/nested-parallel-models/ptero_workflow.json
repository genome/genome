{
   "links" : [
      {
         "dataFlow" : {
            "outputs" : "outputs"
         },
         "destination" : "output connector",
         "source" : "Outer"
      },
      {
         "dataFlow" : {
            "prefix_lists" : "prefix_list",
            "suffixes" : "suffixes"
         },
         "destination" : "Outer",
         "source" : "input connector"
      }
   ],
   "tasks" : {
      "Outer" : {
         "methods" : [
            {
               "name" : "Outer",
               "parameters" : {
                  "links" : [
                     {
                        "dataFlow" : {
                           "prefix_list" : "prefixes",
                           "suffixes" : "suffixes"
                        },
                        "destination" : "Inner",
                        "source" : "input connector"
                     },
                     {
                        "dataFlow" : {
                           "outputs" : "outputs"
                        },
                        "destination" : "output connector",
                        "source" : "Inner"
                     }
                  ],
                  "tasks" : {
                     "Inner" : {
                        "methods" : [
                           {
                              "name" : "Inner",
                              "parameters" : {
                                 "links" : [
                                    {
                                       "dataFlow" : {
                                          "prefixes" : "prefix",
                                          "suffixes" : "suffix"
                                       },
                                       "destination" : "Appender",
                                       "source" : "input connector"
                                    },
                                    {
                                       "dataFlow" : {
                                          "output" : "outputs"
                                       },
                                       "destination" : "output connector",
                                       "source" : "Appender"
                                    }
                                 ],
                                 "tasks" : {
                                    "Appender" : {
                                       "methods" : [
                                          {
                                             "name" : "shortcut",
                                             "parameters" : {
                                                "commandLine" : [
                                                   "genome",
                                                   "ptero",
                                                   "wrapper",
                                                   "--command-class",
                                                   "Genome::Ptero::TestCommand::ParamAppender",
                                                   "--method",
                                                   "shortcut",
                                                   "--log-directory",
                                                   "test_logs/nested-parallel-models"
                                                ],
                                                "environment" : {
                                                   "XGENOME_LSB_SUB_ADDITIONAL" : "docker(hello-world)",
                                                   "XGENOME_PTERO_LSF_SERVICE_URL" : "http://lsf.example.com/v1",
                                                   "XGENOME_PTERO_SHELL_COMMAND_SERVICE_URL" : "http://example.com/v1",
                                                   "XGENOME_SOFTWARE_RESULT_ASYNC_LOCKING" : "1"
                                                },
                                                "retrySettings" : {
                                                   "attempts" : 750,
                                                   "exitCode" : 75,
                                                   "initialInterval" : 60,
                                                   "maxInterval" : 3600
                                                },
                                                "user" : "dmorton",
                                                "workingDirectory" : "/home/archive/dmorton/genome/lib/perl/Genome"
                                             },
                                             "service" : "job",
                                             "serviceDataToSave" : [
                                                "error_message",
                                                "error"
                                             ],
                                             "serviceUrl" : "http://example.com/v1"
                                          },
                                          {
                                             "name" : "execute",
                                             "parameters" : {
                                                "command" : "genome ptero wrapper --command-class Genome::Ptero::TestCommand::ParamAppender --method execute --log-directory test_logs/nested-parallel-models",
                                                "cwd" : "/home/archive/dmorton/genome/lib/perl/Genome",
                                                "environment" : {
                                                   "LSB_SUB_ADDITIONAL" : "docker(hello-world)",
                                                   "XGENOME_LSB_SUB_ADDITIONAL" : "docker(hello-world)",
                                                   "XGENOME_PTERO_LSF_SERVICE_URL" : "http://lsf.example.com/v1",
                                                   "XGENOME_PTERO_SHELL_COMMAND_SERVICE_URL" : "http://example.com/v1"
                                                },
                                                "options" : {
                                                   "errFile" : "/tmp/ptero-lsf-logfile-1bc57aae-446f-45bb-b986-5992084488d9.err",
                                                   "jobGroup" : "/genome/dmorton",
                                                   "numProcessors" : 1,
                                                   "outFile" : "/tmp/ptero-lsf-logfile-1bc57aae-446f-45bb-b986-5992084488d9.out",
                                                   "postExecCmd" : "bash -c '/usr/bin/ptero-lsf-post-exec --stderr /tmp/ptero-lsf-logfile-5df2b662-7929-473d-94b0-6fafaa7f1b9f.err --stdout /tmp/ptero-lsf-logfile-5df2b662-7929-473d-94b0-6fafaa7f1b9f.out' > /tmp/ptero-lsf-logfile-5df2b662-7929-473d-94b0-6fafaa7f1b9f-postexec.log 2>&1 && rm -f /tmp/ptero-lsf-logfile-5df2b662-7929-473d-94b0-6fafaa7f1b9f-postexec.log",
                                                   "preExecCmd" : "/docker_run.py /usr/bin/ptero-lsf-pre-exec; exit 0;",
                                                   "queue" : "long",
                                                   "resReq" : "select[gtmp>1 && mem>3000] span[hosts=1] rusage[gtmp=1 && mem=3000]"
                                                },
                                                "pollingInterval" : 300,
                                                "rLimits" : {
                                                   "RSS" : 3000000
                                                },
                                                "user" : "dmorton"
                                             },
                                             "service" : "job",
                                             "serviceDataToSave" : [
                                                "error_message",
                                                "error",
                                                "lsfJobId"
                                             ],
                                             "serviceUrl" : "http://lsf.example.com/v1"
                                          }
                                       ],
                                       "parallelBy" : "suffix"
                                    }
                                 }
                              },
                              "service" : "workflow"
                           }
                        ],
                        "parallelBy" : "prefixes"
                     }
                  }
               },
               "service" : "workflow"
            }
         ],
         "parallelBy" : "prefix_list"
      }
   }
}
