#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use File::Spec;
use Test::More;
use Genome::Utility::Test qw(compare_ok);

my $pkg = 'Genome::WorkflowBuilder::StreamGraph';

use_ok($pkg);
my $test_dir = File::Spec->canonpath(__FILE__.".d");
my $expected_out = File::Spec->join($test_dir, "out");
my $expected_xml = File::Spec->join($test_dir, "xml");

my $output_xml = Genome::Sys->create_temp_file_path;
my $graph = $pkg->create(
    output_xml => $output_xml,
);

my $in = File::Spec->join($test_dir, "in");
my $process1 = Genome::WorkflowBuilder::StreamProcess->create(
    name => 'p1',
    args => [qw(cat /dev/stdin)],
    in_file_link => $in,
);

my $out = Genome::Sys->create_temp_file_path;
my $err = Genome::Sys->create_temp_file_path;

my $process2 = Genome::WorkflowBuilder::StreamProcess->create(
    name => 'p2',
    args => [qw(tail -n 2 /dev/stdin)],
    out_file_link => $out,
    err_file_link => $err,
);

$graph->add_process($process1);
$graph->add_process($process2);

my $link = Genome::WorkflowBuilder::StreamLink->create(
    source => $process1,
    target => $process2,
    source_fd => 'stdout',
);
$graph->add_link($link);

my $xml = Genome::Sys->create_temp_file_path;
Genome::Sys->write_file($xml, $graph->get_xml);
if ($ENV{GENERATE_TEST_DATA}) {
    Genome::Sys->copy_file($xml, $expected_xml);
}
compare_ok($xml, $expected_xml, "xml produced correctly",
    filters => [qr(/tmp.*"/)],
    replace => [
        [qr(\Q$test_dir\E), q(TEST_DIR)],
    ],
);
ok($graph->execute, "Processes executed successfully");
compare_ok($out, $expected_out, "output of process2 is correct");

ok(-f $err, "Error file exists");
ok(!-s $err, "Error file is empty");
ok(-s $output_xml, "Output xml is not empty");

done_testing;
