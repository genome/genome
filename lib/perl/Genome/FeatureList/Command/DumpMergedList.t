#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1; #FeatureLists generate their own IDs, but this is still a good idea
};

use Test::More tests => 7;

use above 'Genome';
use Genome::Utility::Test qw();

use File::Spec qw();

my $cmd_class = 'Genome::FeatureList::Command::DumpMergedList';
use_ok($cmd_class);


my $data_dir = Genome::Utility::Test->data_dir($cmd_class, 'v0');
my $test_bed_file = File::Spec->join($data_dir, 'input.bed');
ok(-e $test_bed_file, 'test file ' . $test_bed_file . ' exists');
my $test_bed_file_md5 = Genome::Sys->md5sum($test_bed_file);

my $feature_list;
{
    local $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 0;
    $feature_list  = Genome::FeatureList->create(
        name                => 'GFL test feature-list for dump-merged-list',
        format              => '1-based',
        content_type        => 'target region set',
        file_path           => $test_bed_file,
        file_content_hash   => $test_bed_file_md5,
    );
}
ok($feature_list, 'got a feature list');

my $test_output_path = Genome::Sys->create_temp_file_path;

Genome::Sys->dump_status_messages(0);
my $command = $cmd_class->create(
    feature_list => $feature_list,
    output_path => $test_output_path,
);

ok($command, 'created command');
isa_ok($command, $cmd_class);
ok($command->execute, 'executed command');
ok(-s $test_output_path, 'command produced a file');
