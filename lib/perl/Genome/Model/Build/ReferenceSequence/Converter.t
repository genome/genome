#!/usr/bin/env genome-perl

use strict;
use warnings;

use Sub::Install;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use Test::More tests => 11;
use Memoize qw();

use above 'Genome';

use_ok('Genome::Model::Build::ReferenceSequence::Converter');

my ($ref_seq_a, $ref_seq_b, $ref_seq_c, $feature_list) = setup_test_data();
isa_ok($ref_seq_a, 'Genome::Model::Build::ReferenceSequence', 'created test reference-sequence a');
isa_ok($ref_seq_b, 'Genome::Model::Build::ReferenceSequence', 'created test reference-sequence b');
isa_ok($ref_seq_c, 'Genome::Model::Build::ReferenceSequence', 'created test reference-sequence c');
isa_ok($feature_list, 'Genome::FeatureList', 'created test feature-list');

my $converter = Genome::Model::Build::ReferenceSequence::Converter->create(
    source_reference_build => $ref_seq_a,
    destination_reference_build => $ref_seq_b,
    algorithm => 'convert_chrXX_contigs_to_GL',
);

isa_ok($converter, 'Genome::Model::Build::ReferenceSequence::Converter', 'created converter');

my $converted_bed_file = $feature_list->converted_bed_file(reference => $ref_seq_b);
ok($converted_bed_file, 'got converted BED file');

Memoize::flush_cache('Genome::FeatureList::processed_bed_file');
my $converted_bed_file_2 = $feature_list->converted_bed_file(reference => $ref_seq_b);
is($converted_bed_file, $converted_bed_file_2, 'second conversion results in the exact same file');

my $expected_result = <<EOBED
1	2	3	r0
GL000209.1	0	1100	r1
X	15	25	r2
EOBED
;
my $diff = Genome::Sys->diff_file_vs_text($converted_bed_file, $expected_result);
ok(!$diff, 'converter produced expected result')
    or diag('diff: ' . $diff);

subtest 'Test drop_extra_contigs with per-position conversion', sub {
    Sub::Install::reinstall_sub({
            code => sub { return ['1', 'X'] },
            into => 'Genome::Model::Build::ReferenceSequence',
            as => 'chromosome_array_ref',
        });
    my $dc_converter = Genome::Model::Build::ReferenceSequence::Converter->create(
        source_reference_build => $ref_seq_a,
        destination_reference_build => $ref_seq_c,
        algorithm => 'drop_extra_contigs',
        resource => 'convert_chrXX_contigs_to_GL',
    );

    Memoize::flush_cache('Genome::FeatureList::processed_bed_file');
    my $dc_converted_bed_file = $feature_list->converted_bed_file(reference => $ref_seq_c);
    ok($dc_converted_bed_file, 'got converted BED file');

    my $dc_expected_result = <<EOBED
1	2	3	r0
X	15	25	r2
EOBED
    ;
    my $dc_diff = Genome::Sys->diff_file_vs_text($dc_converted_bed_file, $dc_expected_result);
    ok(!$dc_diff, 'converter produced expected result')
        or diag('diff: ' . $dc_diff);
};

subtest 'Test synonym file', sub {
    my $synonym_file = Genome::Sys->create_temp_file_path;
    Genome::Sys->write_file($synonym_file, "A\tchrOtherA\n", "B\tchrOtherB\n", "chrStrange\tweird\n");
    my $syn_converter = Genome::Model::Build::ReferenceSequence::Converter->create(
        source_reference_build => $ref_seq_c,
        destination_reference_build => $ref_seq_b,
        algorithm => 'synonym_file',
        resource => $synonym_file,
    );

    my $bed_file = Genome::Sys->create_temp_file_path;
    Genome::Sys->write_file($bed_file, "chrOtherA\t50\t51\tregion1\n", "chrOtherA\t60\t61\tregion2\n", "weird\t100\t500\tregion3b\n", "chrOtherB\t999\t9999\tbigRegion3a\n");
    my $md5 = Genome::Sys->md5sum($bed_file);
    my $fl = Genome::FeatureList->create(
        name => 'ref_seq_test_feature_list_2',
        format => 'true-BED',
        reference_id => $ref_seq_c->id,
        file_path => $bed_file,
        file_content_hash => $md5,
    );

    my $synonym_converted_bed_file = $fl->converted_bed_file(reference => $ref_seq_b);
    ok($synonym_converted_bed_file, 'got converted BED file');

    my $synonym_expected_result = <<EOBED
A	50	51	r0
A	60	61	r1
chrStrange	100	500	r2
B	999	9999	r3
EOBED
;

    my $diff = Genome::Sys->diff_file_vs_text($synonym_converted_bed_file, $synonym_expected_result);
    ok(!$diff, 'converter produced expected result')
        or diag('diff: '. $diff);
};


sub setup_test_data {
    my $taxon = Genome::Taxon->get(species_name => 'human');
    my $pp = Genome::ProcessingProfile::ReferenceSequence->create(name => 'test_ref_seq_pp');
    my $ref_seq_model = Genome::Model::ReferenceSequence->create(
        processing_profile_id => $pp->id,
        subject_id => $taxon->id,
        subject_class_name => $taxon->class,
        name => 'test_for_converter',
    );

    my $ref_seq_a = Genome::Model::Build::ReferenceSequence->create(
        model_id => $ref_seq_model->id,
        version => 'a',
    );

    my $ref_seq_b = Genome::Model::Build::ReferenceSequence->create(
        model_id => $ref_seq_model->id,
        version => 'b',
    );

    my $ref_seq_c = Genome::Model::Build::ReferenceSequence->create(
        model_id => $ref_seq_model->id,
        version => 'c',
    );

    my $temp_file = Genome::Sys->create_temp_file_path();

    my $test_bed_content = <<EOBED
chr1	2	3	region1
chr19_GL000209R	0	1100	region2
chrX	15	25	region3
EOBED
;
    Genome::Sys->write_file($temp_file, $test_bed_content);
    my $md5 = Genome::Sys->md5sum($temp_file);

    my $feature_list = Genome::FeatureList->create(
        name => 'ref_seq_test_feature_list',
        format => 'true-BED',
        reference_id => $ref_seq_a->id,
        file_path => $temp_file,
        file_content_hash => $md5,
    );

    return ($ref_seq_a, $ref_seq_b, $ref_seq_c, $feature_list);
}
