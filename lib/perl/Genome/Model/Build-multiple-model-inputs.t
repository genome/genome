#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use Genome::Test::Factory::AnalysisProject;

Genome::Report::Email->silent();

Genome::Config::set_env('workflow_builder_backend', 'inline');

class Genome::ProcessingProfile::Test {
    is => 'Genome::ProcessingProfile',
};

class Genome::Model::Test {
    is => 'Genome::ModelDeprecated',
    has_input => [
        input_models => {
            is => 'Genome::Model',
            is_many => 1,
            is_optional => 1,
        },
    ],
};
sub Genome::Model::Test::_execute_build { return 1 };

class Genome::Model::Build::Test {
    is => 'Genome::Model::Build',
    has_input => [
        input_builds => {
            is => 'Genome::Model::Build',
            is_many => 1,
            is_optional => 1,
        },
    ],
};

my $pp = Genome::ProcessingProfile::Test->create(
    name => 'test pp',
);

my $sample = Genome::Sample->create(
    name => 'test sample',
);

my $anp = Genome::Test::Factory::AnalysisProject->setup_object();

my $model1 = Genome::Model->create(
    name => 'test model 1',
    subject_id => $sample->id,
    subject_class_name => $sample->class,
    processing_profile_id => $pp->id,
);

ok ($model1, 'created test model 1') or die;
$anp->add_model_bridge(model_id => $model1->id);

my $model2 = Genome::Model->create(
    name => 'test model 2',
    subject_id => $sample->id,
    subject_class_name => $sample->class,
    processing_profile_id => $pp->id,
);

ok ($model2, 'created test model 2') or die;
$anp->add_model_bridge(model_id => $model2->id);

my $model3 = Genome::Model::Test->create(
    name => 'test model 3',
    subject_id => $sample->id,
    subject_class_name => $sample->class,
    processing_profile_id => $pp->id,
    input_models => [$model1,$model2],
);

ok ($model3, 'created test model 3') or die;
$anp->add_model_bridge(model_id => $model3->id);

my @models = $model3->input_models;
is (scalar(@models),2, 'test model has 2 input models');

my $build1 = Genome::Model::Build->create (
    model => $model1,
);

ok ($build1, 'created build 1') or die;

$model1->build_requested(1);
ok($build1->start(), 'build started!');

is($build1->status, 'Succeeded', 'build completed successfully');

my $build2 = Genome::Model::Build->create (
    model => $model2,
);

ok ($build2, 'created build 2') or die;

$model2->build_requested(1);
ok($build2->start(), 'build started!');

is($build2->status, 'Succeeded', 'build completed successfully');

#This build should automatically copy both input_models inputs
#to input_builds inputs
my $build3 = Genome::Model::Build::Test->create (
    model => $model3,
);

ok ($build3, 'created build 3') or die;

my @input_builds = $build3->input_builds;
is (scalar(@input_builds), 2, 'both input builds were copied');
@input_builds = sort by_date @input_builds;

my @expected_inputs = ($build1, $build2);
@expected_inputs = sort by_date @expected_inputs;
is_deeply(\@input_builds, \@expected_inputs, 'input builds were copied correctly');

my $build1a = Genome::Model::Build->create (
    model => $model1,
);

ok ($build1a, 'created build 1a') or die;

$model1->build_requested(1);
ok($build1a->start(), 'build started');
is($build1a->status, 'Succeeded', 'build completed successfully');

#This build should get the most recent build.
#However, since in testing the ids are negative, the most recent build
#has the 'lowest' id and the earliest build has a higher id
#(The last shall be first)
my $build3a = Genome::Model::Build::Test->create (
    model => $model3,
);

ok($build3a, 'created build 3a') or die;

@input_builds = $build3a->input_builds;
is (scalar(@input_builds), 2, 'both input builds were copied');
@input_builds = sort by_date @input_builds;
@expected_inputs = ($build1a, $build2);
@expected_inputs = sort by_date @expected_inputs;
is_deeply(\@input_builds, \@expected_inputs, 'newer input builds were copied correctly');

#This builds should leave the user-defined build (1a) and copy the other
my $build3b = Genome::Model::Build::Test->create (
    model => $model3,
    input_builds => [$build1a],
);

ok($build3b, 'created build 3b') or die;

@input_builds = $build3b->input_builds;
is (scalar(@input_builds),2, 'both input builds were copied');
@input_builds = sort by_date @input_builds;
@expected_inputs = ($build1a, $build2);
@expected_inputs = sort by_date @expected_inputs;
is_deeply(\@input_builds, \@expected_inputs,'user-defined input build was copied correctly');
done_testing;

sub by_date {
    $a->date_scheduled cmp $b->date_scheduled || $a->date_completed cmp $b->date_completed || $a->id cmp $b->id
}
