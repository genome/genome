#!/usr/bin/env perl

use Data::Dumper;
use IO::String;
use Test::More;
use above 'Genome';

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $pkg = 'Genome::Model::PhenotypeCorrelation::ClinicalData';
use_ok($pkg);

# S1 has more columns than the header
my $extra_data_col = new IO::String(<<EOS
Sample_Name\tT
S1\t0\t1
EOS
);

eval {
    $pkg->from_filehandle($extra_data_col);
};
ok($@, "Extra data column causes an error");
#print "The error message was:\n$@\n";

# The header has has more columns than S1
my $extra_header_col = new IO::String(<<EOS
Sample_Name\tT1\tT2
S1\t0
EOS
);

eval {
    $pkg->from_filehandle($extra_header_col);
};
ok($@, "Missing data column causes an error");
#print "The error message was:\n$@\n";

# S2 has a blank entry for T1
my $blanks = new IO::String(<<EOS
Sample_Name\tT1\tT2
S1\t0\t1
S2\t\t1
S3\tNA\tNA
S4\t4\tNA
EOS
);

my $cd = $pkg->from_filehandle($blanks, missing_string => "NA");
ok($cd, "Loaded data from file with blanks");
is_deeply($cd->attribute_values("T1"), [0, undef, undef, 4], "attribute T1 values ok");
is_deeply($cd->attribute_values("T2"), [1, 1, undef, undef], "attribute T2 values ok");

# T1 \in {High, Low}    <- can be coerced to binary
# T2 \in R              <- cannot
# T3 \in {X,Y,Z}        <- cannot
my $binary = new IO::String(<<EOS
Sample_Name\tT1\tT2\tT3
A\tHigh\t0.344\tX
B\tLow\t-1.256\tX
C\tLow\t-0.347\tY
D\tHigh\t1.434\tY
E\tNA\t0.0162\tZ
EOS
);

$cd = $pkg->from_filehandle($binary);
is($cd->subject_column_header, "Sample_Name", "subject_column_header is set");
is_deeply([sort $cd->sample_names], ['A'..'E'], "sample names are correct");
ok($cd, "Created clinical data object");
eval { $cd->convert_attr_to_factor("T1", levels => [undef, "high"]) };
ok($@, "Attempting to coerce to binary with undef attribute value causes an error");
eval { $cd->convert_attr_to_factor("T1", levels => ["low", undef]); };
ok($@, "Attempting to coerce to binary with undef attribute value causes an error");
eval { $cd->convert_attr_to_factor("T1", levels => [undef, undef]); };
ok($@, "Attempting to coerce to binary with undef attribute value causes an error");


eval {
    $cd->convert_attr_to_factor("T1", levels => ["low", "oops"]);
};
ok($@, "Attempting to coerce to binary with nonexistant attribute value causes an error");

my %updates = $cd->convert_attr_to_factor("T1", levels => ["Low", "High"]);
ok(%updates, "Updated clinical data");
is_deeply(\%updates, { High => 1, Low => 0 }, "Updates are as expected");
is_deeply($cd->attribute_values("T1"), [1,0,0,1,undef], "Coercion to binary worked");
%updates = $cd->convert_attr_to_factor("T1", levels => ["Low", "High"]);
is_deeply($cd->attribute_values("T1"), [1,0,0,1,undef], "Coercion to binary again didn't fail");
ok(!%updates, "No updates reported");
%updates = $cd->convert_attr_to_factor("T1", levels => [undef, undef]);
ok(!%updates, "Coercion from binary to binary with undef case/control labels is ok");
is_deeply($cd->attribute_values("T1"), [1,0,0,1,undef], "Coercion to binary again didn't fail");

my $null_last_field = new IO::String(<<EOS
Sample_Name\tT1\tT2\tT3
A\tHigh\t0.344\t
EOS
);
$cd = $pkg->from_filehandle($null_last_field);
is_deeply($cd->attribute_values("T1"), ["High"], "attribute T1 values ok");
is_deeply($cd->attribute_values("T2"), [0.344], "attribute T2 values ok");
is_deeply($cd->attribute_values("T3"), [undef], "attribute T2 values ok");



done_testing();
