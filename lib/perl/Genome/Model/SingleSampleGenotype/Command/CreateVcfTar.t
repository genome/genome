#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Test::Factory::Model::SingleSampleGenotype;
use Genome::Test::Factory::Build;
use Sub::Install qw(reinstall_sub);
use Genome::Utility::Test qw(compare_ok);

my $pkg = "Genome::Model::SingleSampleGenotype::Command::CreateVcfTar";
use_ok($pkg);

my $model = Genome::Test::Factory::Model::SingleSampleGenotype->setup_object();
my $build = Genome::Test::Factory::Build->setup_object(model_id => $model->id);

for my $chr (qw(1 2)) {
    my $r = Genome::Model::SingleSampleGenotype::Result::HaplotypeCaller->__define__(id => $chr);
    $r->output_dir(File::Spec->join(__FILE__.".d"));

    my $sr = Genome::SoftwareResult::User->create(
            software_result => $r,
            user => $build,
            label => "haplotype_caller_result",
        );
}
reinstall_sub({
    into => 'Genome::Model::SingleSampleGenotype::Result::HaplotypeCaller',
    as => 'intervals',
    code => sub {my $self = shift;
        my @intervals = ($self->id);
        return @intervals;
    },
});

my $out = Genome::Sys->create_temp_directory;
my $cmd = $pkg->create(builds => [$build], output_dir => $out);

ok($cmd->execute, "Successfully executed cmd");

my $tar_path = File::Spec->join($out, $build->id.".tar.gz");

my $result = `tar -tf $tar_path | wc -l`;
chomp($result);

is($result, 3, "File created correctly");

my $includes_manifest = `tar -tf $tar_path | grep MANIFEST.txt`;
chomp $includes_manifest;

is($includes_manifest, 'MANIFEST.txt', 'tar contains manifest');

done_testing;

