#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    require Genome::Config;
    Genome::Config::set_env('software_result_test_name', 'testcase-mimic-short-build' . time());
};

use above 'Genome';
use Test::More tests => 4;

use_ok('Genome::Model::Tools::DetectVariants2::Result::Combine::LqUnion');

my $test_dir = Genome::Config::get('test_inputs') . '/Genome-Model-Tools-DetectVariants2-Combine-LqUnion';

#This is from the somatic-variation short test. Consider creating dummy data!
my $hq_result = Genome::SoftwareResult->get('5d0d3b64692149a99573b3f5d499dbb7');

 my %results;
my @to_process = ($hq_result);
while(my $r = shift @to_process) {
    $results{$r->id}++;
    my @u = map($_->software_result, Genome::SoftwareResult::User->get(user_id => $r->id, user_class_name => $r->class));
    push @to_process, grep($_->isa('Genome::Model::Tools::DetectVariants2::Result::Base'), @u);
}



is(scalar(keys %results), 6, 'found all expected results for union')
    or diag('found: ' . join(' ' , keys %results));

my $lq = Genome::Model::Tools::DetectVariants2::Result::Combine::LqUnion->create(
    result_ids => [keys %results],
    variant_type => 'snv',
    test_name => Genome::Config::get('software_result_test_name') || undef,
);
isa_ok($lq, 'Genome::Model::Tools::DetectVariants2::Result::Combine::LqUnion', 'generated_result');

my $expected = join('/', $test_dir, 'v3', 'snvs.lq.bed');
my $actual = $lq->path('snvs.lq.bed');

ok(!Genome::Sys->diff_file_vs_file($expected, $actual), 'result matches expected output')
    or diag("diff:\n" . Genome::Sys->diff_file_vs_file($expected, $actual));
