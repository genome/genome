#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More;
use Test::Exception;
use File::Basename;
use Genome::Utility::Test qw(compare_ok);

my $pkg = 'Genome::Model::Tools::Sam::ExtractReadGroupBam';
use_ok($pkg) or die;

my $test_dir = Genome::Utility::Test->data_dir_ok($pkg, 'v1');
my $rg_id    = 2894005341;

my %params = (
    source_bam    => File::Spec->join($test_dir, 'test.bam'),
    read_group_id => $rg_id,
);

subtest 'testing command failure with invalid input' => sub {
    my $cmd = $pkg->create(
        source_bam => 'no.bam',
        output_bam => 'Fake.bam',
        read_group_id => $rg_id,
    );
    dies_ok(sub {$cmd->execute}, 'Invalid input bam');
};

subtest 'testing command without options' => sub {
    my $out_bam = Genome::Sys->create_temp_file_path('readgroup1.bam');
    my $cmd = $pkg->create(
        %params,
        output_bam => $out_bam,
    );
    ok($cmd->execute, "Executed $pkg");
    my $expected = File::Spec->join($test_dir, 'expected_no_options.bam');
    compare_ok($expected, $out_bam, 'output bam generated as expected');
};

subtest 'testing command with all options' => sub {
    my $out_bam  = Genome::Sys->create_temp_file_path('readgroup2.bam');
    my $out_dir  = dirname($out_bam);

    my $cmd = $pkg->create(
        %params,
        output_bam => $out_bam,
        flagstat   => 1,
        index_bam  => 1,
        md5        => 1,
    );
    ok($cmd->execute, "Executed $pkg");

    for my $type ('', 'flagstat', 'bai', 'md5') {
        my $expected_name = 'expected_options.bam';
        $expected_name .= '.' .$type if $type;
        my $out_name = 'readgroup2.bam';
        $out_name .= '.' .$type if $type;
        my $expected = File::Spec->join($test_dir, $expected_name);
        my $test_out = File::Spec->join($out_dir, $out_name);
        compare_ok($expected, $test_out, "$out_name generated as expected");
    }
};

done_testing();

