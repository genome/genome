#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Test::Factory::InstrumentData::MergedAlignmentResult;
use Genome::Test::Factory::InstrumentData::AlignmentResult;
use Genome::Test::Factory::InstrumentData::Solexa;
use Genome::Test::Factory::Qc::Result;
use Genome::Test::Factory::Qc::Config;

my $pkg = 'Genome::Model::SomaticValidation::Command::AlignmentStatsSummary';
use_ok($pkg);

my $result = Genome::Test::Factory::InstrumentData::MergedAlignmentResult->setup_object();
my $bam_flagstat_path = File::Spec->join(__FILE__.".d", "test.bam.flagstat");
my $ind_result = Genome::Test::Factory::InstrumentData::AlignmentResult->setup_object();
my $inst_data = Genome::Test::Factory::InstrumentData::Solexa->setup_object();

my $test_qc_config = Genome::Test::Factory::Qc::Config->setup_object(
   name => 'test_qc_config',
   type => 'wgs',
); 

my $test_qc_result = Genome::Test::Factory::Qc::Result->setup_object(
   alignment_result => $ind_result,
   config_name => 'test_qc_config'
);

Sub::Install::reinstall_sub({
    into => "Genome::Qc::Result",
    as => 'get_unflattened_metrics',
    code => sub {
        return (
            FIRST_OF_PAIR  => {PF_MISMATCH_RATE => 0.03},
            SECOND_OF_PAIR => {PF_MISMATCH_RATE => 0.05},
        );
    },
});

Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::AlignmentResult::Merged",
    as => 'bam_flagstat_path',
    code => sub {return $bam_flagstat_path;},
});
Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::AlignmentResult::Merged",
    as => 'collect_individual_alignments',
    code => sub {return ($ind_result);},
});
Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::AlignmentResult",
    as => 'total_base_count',
    code => sub {return 10;},
});
Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::AlignmentResult",
    as => 'total_aligned_base_count',
    code => sub {return 5;},
});
Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::AlignmentResult",
    as => 'total_aligned_base_count',
    code => sub {return 5;},
});
Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::AlignmentResult",
    as => "instrument_data",
    code => sub {return $inst_data;},
});
Sub::Install::reinstall_sub({
    into => "Genome::Library",
    as => 'original_insert_size',
    code => sub {return 2;},
});
Sub::Install::reinstall_sub({
    into => "Genome::InstrumentData::Solexa",
    as => 'read_length',
    code => sub {return 1;},
});
Sub::Install::reinstall_sub({
    into => $pkg,
    as => '_user_data_for_nested_results',
    code => sub {return;},
});
Sub::Install::reinstall_sub({
    into => $pkg,
    as => 'haploid_coverage',
    code => sub {return 0;},
});
Sub::Install::reinstall_sub({
    into => $pkg,
    as => 'targeted_insert_length',
    code => sub {return 0;},
});

my $r = $pkg->__define__();
my $metrics = $pkg->_alignment_metrics_from_result($result);
my $expected_metrics = {
        '# of lanes (or "sequence events")' => "1",
        'Total Bases' => "10",
        'Total Mapped Bases' => "5",
        'Total Unique Mapped Bases' => "-20",
        'Aligned %' => "94.82",
        'Unique %' => "94.28",
        'Error Rate' => "4.00",
        'Total # Reads' => "4688",
        '%pairs mapping across chromosomes' => "1.64",
};
is_deeply($metrics, $expected_metrics, "Metrics gathered correctly");
done_testing;

