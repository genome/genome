#!/usr/bin/env genome-perl


BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";

use Test::More;
use YAML::Syck qw(LoadFile);

use Genome::Utility::Test qw(compare_ok);

use Genome::Test::Factory::InstrumentData::Solexa;
use Genome::Test::Factory::InstrumentData::AlignmentResult;
use Genome::Test::Factory::Model::SomaticValidation;
use Genome::Test::Factory::Build;
use Genome::Test::Factory::Qc::Result;

use Sub::Install qw(reinstall_sub);

use Genome::Qc::Result;

reinstall_sub(
{
    into => 'Genome::Qc::Result',
    as => 'get_metrics',
    code => sub {
        return (
           metric_A => 1,
           metric_B => 2,
           metric_C => 3,
           metric_D => 4,
           label_1 => {
                   metric_E => 5,
                   metric_F => 6,
           },
           PAIR => {
                PF_ALIGNED_BASES => 30000,
                PF_READS_ALIGNED => 3000,
           },
           reads_marked_duplicates => 350,
           GENOME_TERRITORY => 1000,
         );
    },   
},
);

my $pkg = 'Genome::Qc::Command::BuildMetrics';
use_ok($pkg);

my $test_dir = __FILE__.'.d';
my $expected_output_file = $test_dir .'/expected_build_metrics.yml';
my $test_output_file = Genome::Sys->create_temp_file_path();

# Get expected IDs from YAML file.
my $expected_metrics = LoadFile($expected_output_file);
my $expected_metrics_hash = $expected_metrics->[0];
my $expected_build_id = $expected_metrics_hash->{'build_id'};
my $expected_instrument_data_id = $expected_metrics_hash->{'instrument_data_ids'};

my $test_model = Genome::Test::Factory::Model::SomaticValidation->setup_object();
my $test_build = Genome::Test::Factory::Build->setup_object(
   model_id => $test_model->id,
);

my $test_inst_data_1 = Genome::Test::Factory::InstrumentData::Solexa->setup_object();
my $replace = [
                              [$expected_instrument_data_id,$test_inst_data_1->id],
                              [$expected_build_id,$test_build->id],
];

my $instrument_data_build_input = Genome::Model::Build::Input->__define__(
        model => $test_model,
        build => $test_build,
        value => $test_inst_data_1,
        name => 'instrument_data',
);      
    
my $test_alignment_result = Genome::Test::Factory::InstrumentData::AlignmentResult->setup_object(
   instrument_data => $test_inst_data_1,
   build => $test_build,
);

my $test_qc_result = Genome::Test::Factory::Qc::Result->setup_object(
   alignment_result => $test_alignment_result,
   config_name => 'test_qc_config'
);
$test_qc_result->add_user(
        label => 'qc test result',
        user => $test_build
); 

my $cmd_with_out = Genome::Qc::Command::BuildMetrics->create(
   builds => $test_build,
   output_file => $test_output_file,
);
isa_ok($cmd_with_out,'Genome::Qc::Command::BuildMetrics');       
ok($cmd_with_out->execute,'execute build-metrics command with output file');

compare_ok($test_output_file, $expected_output_file, replace => $replace, 
    name => "Build metrics printed correctly to output file");

done_testing;