#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Utility::Test qw(compare_ok);
use Genome::Test::Factory::Model::ReferenceSequence;
use Genome::Test::Factory::Build;
use Genome::Test::Factory::InstrumentData::Solexa;
use Genome::Test::Factory::InstrumentData::AlignmentResult;
use Sub::Override;
use Cwd qw(abs_path);
use JSON qw(encode_json);

my $pkg = 'Genome::Qc::Tool::Picard::CalculateHsMetrics';
use_ok($pkg);

my $data_dir = abs_path(__FILE__.".d");

my $reference_sequence_model = Genome::Test::Factory::Model::ReferenceSequence->setup_object();
my $reference_sequence = Genome::Test::Factory::Build->setup_object(
    model_id => $reference_sequence_model->id
);
my $override_seqdict = Sub::Override->new(
    'Genome::Model::Build::ReferenceSequence::get_sequence_dictionary',
    sub {return File::Spec->join($data_dir, 'seqdict.sam');},
);

my $feature_list = Genome::FeatureList->__define__(
    name => 'test',
    reference => $reference_sequence,
    format => 'multi-tracked',
    file_content_hash => '3649dadff905b037028c25d1bc1fb0ae',
);
my $override_file_path = Sub::Override->new(
    'Genome::FeatureList::file_path',
    sub {return File::Spec->join($data_dir, 'feature_list.bed');}
);

my $instrument_data = Genome::Test::Factory::InstrumentData::Solexa->setup_object(
    target_region_set_name => 'test',
);
my $alignment_result = Genome::Test::Factory::InstrumentData::AlignmentResult->setup_object(
    reference_build => $reference_sequence,
    instrument_data => $instrument_data,
);

my $bam_file = File::Spec->join($data_dir, 'speedseq_merged.bam');
my $bait_intervals = File::Spec->join($data_dir, 'bait.intervals');
my $target_intervals = File::Spec->join($data_dir, 'target.intervals');
my $temp_file = Genome::Sys->create_temp_file_path;

my $config = {
    picard_calculate_hs_metrics => {
        class => 'Genome::Qc::Tool::Picard::CalculateHsMetrics',
        params => {
            input_file => $bam_file,
            bait_intervals => $bait_intervals, #region_of_interest_set
            target_intervals => $target_intervals, #target_region_set
            temp_directory => $temp_file,
            use_version => 1.123,
            metric_accumulation_level => ['SAMPLE'],
        },
    }
};

my $qc_config_name = 'testing-qc-run';
my $qc_config_item = Genome::Qc::Config->create(
    name => $qc_config_name,
    type => 'exome',
    config => encode_json($config),
);

my $command = Genome::Qc::Run->create(
    config_name => $qc_config_name,
    alignment_result => $alignment_result,
    %{Genome::Test::Factory::SoftwareResult::User->setup_user_hash},
);
ok($command->execute, "Command executes ok");

my %tools = $command->output_result->_tools;
my ($tool) = values %tools;
ok($tool->isa($pkg), 'Tool created successfully');

my $output = $tool->qc_metrics_file;
my @expected_cmd_line =(
    'java',
    '-Xmx4096m',
    '-XX:MaxPermSize=64m',
    '-cp',
    '/usr/share/java/ant.jar:/usr/share/java/picard-tools1.123/CalculateHsMetrics.jar',
    'picard.analysis.directed.CalculateHsMetrics',
    sprintf('BAIT_INTERVALS=%s', $bait_intervals),
    sprintf('INPUT=%s', $bam_file),
    'MAX_RECORDS_IN_RAM=500000',
    'METRIC_ACCUMULATION_LEVEL=SAMPLE',
    sprintf('OUTPUT=%s', $output),
    sprintf('TARGET_INTERVALS=%s', $target_intervals),
    sprintf('TMP_DIR=%s', $temp_file),
    'VALIDATION_STRINGENCY=SILENT',
);
is_deeply([$tool->cmd_line], [@expected_cmd_line], 'Command line list as expected');

my %expected_metrics = (
    'AT_DROPOUT' => '0',
    'BAIT_DESIGN_EFFICIENCY' => '0.669528',
    'BAIT_SET' => 'bait',
    'BAIT_TERRITORY' => '466',
    'FOLD_80_BASE_PENALTY' => '?',
    'FOLD_ENRICHMENT' => '9269.481222',
    'GC_DROPOUT' => '0',
    'GENOME_SIZE' => '59373566',
    'HS_LIBRARY_SIZE' => '',
    'HS_PENALTY_100X' => '0',
    'HS_PENALTY_10X' => '0',
    'HS_PENALTY_20X' => '0',
    'HS_PENALTY_30X' => '0',
    'HS_PENALTY_40X' => '0',
    'HS_PENALTY_50X' => '0',
    'LIBRARY' => '',
    'MEAN_BAIT_COVERAGE' => '0.33691',
    'MEAN_TARGET_COVERAGE' => '?',
    'NEAR_BAIT_BASES' => '161',
    'OFF_BAIT_BASES' => '1840',
    'ON_BAIT_BASES' => '157',
    'ON_BAIT_VS_SELECTED' => '0.493711',
    'ON_TARGET_BASES' => '69',
    'PCT_OFF_BAIT' => '0.852641',
    'PCT_PF_READS' => '1',
    'PCT_PF_UQ_READS' => '1',
    'PCT_PF_UQ_READS_ALIGNED' => '0.638889',
    'PCT_SELECTED_BASES' => '0.147359',
    'PCT_TARGET_BASES_100X' => '0',
    'PCT_TARGET_BASES_10X' => '0',
    'PCT_TARGET_BASES_20X' => '0',
    'PCT_TARGET_BASES_2X' => '0',
    'PCT_TARGET_BASES_30X' => '0',
    'PCT_TARGET_BASES_40X' => '0',
    'PCT_TARGET_BASES_50X' => '0',
    'PCT_USABLE_BASES_ON_BAIT' => '0.043611',
    'PCT_USABLE_BASES_ON_TARGET' => '0.019167',
    'PF_READS' => '36',
    'PF_UNIQUE_READS' => '36',
    'PF_UQ_BASES_ALIGNED' => '2158',
    'PF_UQ_READS_ALIGNED' => '23',
    'READ_GROUP' => '',
    'SAMPLE' => '',
    'TARGET_TERRITORY' => '312',
    'TEST-patient1-somval_tumor1	AT_DROPOUT' => '0',
    'TEST-patient1-somval_tumor1	BAIT_DESIGN_EFFICIENCY' => '0.669528',
    'TEST-patient1-somval_tumor1	BAIT_SET' => 'bait',
    'TEST-patient1-somval_tumor1	BAIT_TERRITORY' => '466',
    'TEST-patient1-somval_tumor1	FOLD_80_BASE_PENALTY' => '?',
    'TEST-patient1-somval_tumor1	FOLD_ENRICHMENT' => '9269.481222',
    'TEST-patient1-somval_tumor1	GC_DROPOUT' => '0',
    'TEST-patient1-somval_tumor1	GENOME_SIZE' => '59373566',
    'TEST-patient1-somval_tumor1	HS_LIBRARY_SIZE' => '',
    'TEST-patient1-somval_tumor1	HS_PENALTY_100X' => '0',
    'TEST-patient1-somval_tumor1	HS_PENALTY_10X' => '0',
    'TEST-patient1-somval_tumor1	HS_PENALTY_20X' => '0',
    'TEST-patient1-somval_tumor1	HS_PENALTY_30X' => '0',
    'TEST-patient1-somval_tumor1	HS_PENALTY_40X' => '0',
    'TEST-patient1-somval_tumor1	HS_PENALTY_50X' => '0',
    'TEST-patient1-somval_tumor1	LIBRARY' => '',
    'TEST-patient1-somval_tumor1	MEAN_BAIT_COVERAGE' => '0.33691',
    'TEST-patient1-somval_tumor1	MEAN_TARGET_COVERAGE' => '?',
    'TEST-patient1-somval_tumor1	NEAR_BAIT_BASES' => '161',
    'TEST-patient1-somval_tumor1	OFF_BAIT_BASES' => '1840',
    'TEST-patient1-somval_tumor1	ON_BAIT_BASES' => '157',
    'TEST-patient1-somval_tumor1	ON_BAIT_VS_SELECTED' => '0.493711',
    'TEST-patient1-somval_tumor1	ON_TARGET_BASES' => '69',
    'TEST-patient1-somval_tumor1	PCT_OFF_BAIT' => '0.852641',
    'TEST-patient1-somval_tumor1	PCT_PF_READS' => '1',
    'TEST-patient1-somval_tumor1	PCT_PF_UQ_READS' => '1',
    'TEST-patient1-somval_tumor1	PCT_PF_UQ_READS_ALIGNED' => '0.638889',
    'TEST-patient1-somval_tumor1	PCT_SELECTED_BASES' => '0.147359',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_100X' => '0',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_10X' => '0',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_20X' => '0',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_2X' => '0',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_30X' => '0',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_40X' => '0',
    'TEST-patient1-somval_tumor1	PCT_TARGET_BASES_50X' => '0',
    'TEST-patient1-somval_tumor1	PCT_USABLE_BASES_ON_BAIT' => '0.043611',
    'TEST-patient1-somval_tumor1	PCT_USABLE_BASES_ON_TARGET' => '0.019167',
    'TEST-patient1-somval_tumor1	PF_READS' => '36',
    'TEST-patient1-somval_tumor1	PF_UNIQUE_READS' => '36',
    'TEST-patient1-somval_tumor1	PF_UQ_BASES_ALIGNED' => '2158',
    'TEST-patient1-somval_tumor1	PF_UQ_READS_ALIGNED' => '23',
    'TEST-patient1-somval_tumor1	READ_GROUP' => '',
    'TEST-patient1-somval_tumor1	SAMPLE' => 'TEST-patient1-somval_tumor1',
    'TEST-patient1-somval_tumor1	TARGET_TERRITORY' => '312',
    'TEST-patient1-somval_tumor1	TOTAL_READS' => '36',
    'TEST-patient1-somval_tumor1	ZERO_CVG_TARGETS_PCT' => '1',
    'TOTAL_READS' => '36',
    'ZERO_CVG_TARGETS_PCT' => '1',
);

is_deeply({$command->output_result->get_metrics}, {%expected_metrics}, 'Parsed metrics as expected');

compare_ok($tool->bait_intervals, $bait_intervals, 'bait_intervals file as expected');
compare_ok($tool->target_intervals, $target_intervals, 'target_intercals file as expected');

$override_file_path->restore;
$override_seqdict->restore;

done_testing;
