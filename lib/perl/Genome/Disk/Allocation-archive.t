#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use File::Temp 'tempdir';
use File::Basename qw(basename dirname);
use File::Find;
use File::Spec;

use lib File::Spec->join(dirname(__FILE__), 'Allocation', 't-lib');
use GenomeDiskAllocationCommon qw(create_test_volumes);

use_ok('Genome::Disk::Allocation') or die;
use_ok('Genome::Disk::Volume') or die;

use Genome::Disk::Allocation;
#$Genome::Disk::Allocation::TESTING_DISK_ALLOCATION = 1;

my @volumes = create_test_volumes(1);

# Make test allocation
my $allocation = Genome::Disk::Allocation->create(
    disk_group_name => $volumes[0]->disk_group_names,
    allocation_path => 'testing123',
    owner_class_name => 'UR::Value',
    owner_id => 'foo',
    kilobytes_requested => 1,
);
ok($allocation, 'created test allocation on non-archive disk');
is($allocation->mount_path, $volumes[0]->mount_path, 'allocation on expected volume');

my $original_absolute_path = $allocation->absolute_path;

# Make a few testing files in the allocation directory
my @files = qw( a.out b.out c.out .hidden.out test/d.out test/.hidden.out);
my @dirs = qw/ test /;
for my $dir (@dirs) {
    my $path = $allocation->absolute_path . "/$dir";
    system("mkdir $path");
    ok(-d $path, "created test dir $path");
}
for my $file (@files) {
    my $path = $allocation->absolute_path . "/$file";
    system("touch $path");
    ok(-e $path, "created test file $path");
}

# Before archiving, set the owner_class_name to a class that doesn't exist to make
# sure this is handled without fault, since some allocations exist in this kind of state.
$allocation->owner_class_name('Foo::Bar');
my $rv = $allocation->archive();
ok($rv, 'archive successfully executed');

is($allocation->status, 'archived', 'allocation archived');
ok(-e $allocation->archive_path, 'allocation moved to archive volume');

my @archive_files;
sub archive_wanted {
    return if $File::Find::name eq $allocation->archive_path;
    push @archive_files, $File::Find::name;
}
find(\&archive_wanted, $allocation->archive_path);

is((scalar @archive_files), ((scalar @files) + (scalar @dirs)), 'expected number of files in archive directory');
for my $file (@archive_files) {
    my $filename = basename($file);
    ok((grep { $_ =~ /$filename/ } (@files, @dirs)), "found $file in archive directory");
}

# Remove the original files
Genome::Sys->remove_directory_tree($original_absolute_path);

# Now unarchive
$rv = $allocation->unarchive();
ok($rv, 'unarchive successfully executed');

is($allocation->status, 'active', 'allocation unarchived');
ok(-e $allocation->absolute_path, 'allocation moved to active volume');

my @allocation_files;
sub wanted {
    return if $File::Find::name eq $allocation->absolute_path;
    push @allocation_files, $File::Find::name;
}
find(\&wanted, $allocation->absolute_path);

is((scalar @allocation_files), ((scalar @files) + (scalar @dirs)), 'expected number of files in allocation directory');
for my $file (@allocation_files) {
    my $filename = basename($file);
    ok((grep { $_ =~ /$filename/ } (@files, @dirs)), "found $file in allocation directory");
}

done_testing();
