#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More tests => 8;
use File::Temp 'tempdir';
use Filesys::Df qw();
require Sub::Install;
use Test::Exception;

use Genome::Test::Factory::Model::SingleSampleGenotype;
use Genome::Test::Factory::Build;

use_ok('Genome::Disk::Command::Allocation::Unarchive') or die;
use_ok('Genome::Disk::Allocation') or die;
use_ok('Genome::Disk::Volume') or die;

$Genome::Disk::Allocation::CREATE_DUMMY_VOLUMES_FOR_TESTING = 0;

my ($analysis_project, $test_dir, $group, $volume);
subtest 'setup' => sub{
    plan tests => 3;

    $analysis_project = Genome::Config::AnalysisProject->__define__(name => 'test AnP for Unarchive.t');

    # Temp testing directory, used as mount path for test volumes and allocations
    $test_dir = tempdir(
        'allocation_testing_XXXXXX',
        TMPDIR => 1,
        UNLINK => 1,
        CLEANUP => 1,
    );

    # Create test group
    $group = Genome::Disk::Group->create(
        disk_group_name => 'test',
        subdirectory => 'info',
        permissions => '775',
        setgid => 1,
        unix_uid => '1',
        unix_gid => '1',
    );
    ok($group, 'created test disk group');

    # Create temp active volume
    my $active_dir = File::Spec->join($test_dir, 'Active');
    Genome::Sys->create_directory($active_dir);

    $volume = Genome::Disk::Volume->create(
        hostname => 'test',
        physical_path => 'test',
        mount_path => $active_dir,
        disk_status => 'active',
        can_allocate => 1,
        total_kb => Filesys::Df::df($active_dir)->{blocks},
    );
    ok($volume, 'created test volume');

    my $assignment = Genome::Disk::Assignment->create(
        group => $group,
        volume => $volume,
    );
    ok($assignment, 'added volume to test group successfully');
    Genome::Sys->create_directory(join('/', $volume->mount_path, $group->subdirectory));
    Genome::Sys->create_directory(join('/', $volume->archive_mount_path, $group->subdirectory));
};

subtest 'unarchive allocation fails with unsupported owner' => sub{
    plan tests => 5;

    my $allocation = _create_an_archived_allocation(UR::Value->get('test'));
    my $cmd = Genome::Disk::Command::Allocation::Unarchive->create(
        allocations => [$allocation],
        analysis_project => $analysis_project,
    );
    ok($cmd, 'created unarchive command');
    throws_ok(sub { $cmd->execute }, qr/currently not handled/, 'command fails with unsupported owner');

};

subtest 'unarchive allocation programmatically' => sub{
    plan tests => 7;

    my $sr = Genome::InstrumentData::AlignmentResult::Speedseq->__define__(test_name => 'testing Unarchive.t');
    my $allocation = _create_an_archived_allocation($sr);
    my $cmd = Genome::Disk::Command::Allocation::Unarchive->create(
        allocations => [$allocation],
        analysis_project => $analysis_project,
    );

    ok($cmd->execute, 'successfully executed unarchive command');
    is($allocation->volume->id, $volume->id, 'allocation moved to active volume');
    ok($allocation->is_archived == 0, 'allocation is not archived');
    my @users = $sr->users;
    is($users[0]->user, $analysis_project, 'analysis project linked to SR whose allocation was unarchived');

};

subtest 'unarchive allocation from the CLI' => sub{
    plan tests => 5;

    my $model = Genome::Test::Factory::Model::SingleSampleGenotype->setup_object(name => 'test model for Unarchive.t');
    Genome::Config::AnalysisProject::ModelBridge->create(analysis_project => $analysis_project, model => $model);
    my $build = Genome::Test::Factory::Build->setup_object(model_id => $model->id);
    my $allocation = _create_an_archived_allocation($build);
    my @args = ($allocation->id, '--analysis-project', $analysis_project->id);
    my $rv = Genome::Disk::Command::Allocation::Unarchive->_execute_with_shell_params_and_return_exit_code(@args);
    ok($rv == 0, 'successfully executed command using simulated command line arguments');
    is($allocation->volume->id, $volume->id, 'allocation updated as expected after archive');

};

subtest 'unarchive allocation owned by imported instrument data' => sub{
    plan tests => 7;

    my $imported = Genome::InstrumentData::Imported->create();
    ok($imported, 'create imported instrument data');
    my $allocation = _create_an_archived_allocation($imported);
    ok(
        Genome::Disk::Command::Allocation::Unarchive->execute(
            allocations => [$allocation],
            analysis_project => $analysis_project,
        ),
        'unarchive imported instrument data',
    );
    my $bridge = $analysis_project->analysis_project_bridges(instrument_data => $imported);
    ok($bridge, 'added imported instrument data to analysis project');
    is($bridge->status, 'skipped', 'bridge status is skipped');

};

done_testing();

sub _create_an_archived_allocation {
    my ($owner) = @_;
    die 'No owner given to create allocation!' if not $owner;

    # Make test allocation
    my $allocation_path = File::Spec->join('some', 'allocation', 'path', time(), rand());
    my $allocation = Genome::Disk::Allocation->create(
        disk_group_name => $group->disk_group_name,
        allocation_path => $allocation_path,
        kilobytes_requested => 100,
        owner_class_name => $owner->class,
        owner_id => $owner->id,
        mount_path => $volume->mount_path,
    );
    ok($allocation, 'created test allocation');
    $allocation->status('archived');
    Genome::Sys->create_directory($allocation->archive_path);
    ok($allocation->is_archived, 'allocation is archived prior to running command, as expected');

    # Create a test tarball
    system("touch " . $allocation->archive_path . "/a.out");
    ok(-e join('/', $allocation->archive_path, 'a.out'), 'archive file successfully created');

    return $allocation;
}

