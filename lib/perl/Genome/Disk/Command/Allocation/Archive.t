#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Temp 'tempdir';
use Filesys::Df qw();

use_ok('Genome::Disk::Allocation') or die;
use_ok('Genome::Disk::Volume') or die;

use Genome::Disk::Allocation;
$Genome::Disk::Allocation::CREATE_DUMMY_VOLUMES_FOR_TESTING = 0;
#$Genome::Disk::Allocation::TESTING_DISK_ALLOCATION = 1;

# Create test group
my $group = Genome::Disk::Group->create(
    disk_group_name => 'test',
    subdirectory => 'info',
    permissions => '775',
    setgid => 1,
    unix_uid => '1',
    unix_gid => '1',
);
ok($group, 'created test disk group');

# Create temp active volume
my $volume_path = tempdir(
    "test_volume_XXXXXXX",
    TMPDIR => 1,
    CLEANUP => 1,
    UNLINK => 1,
);
my $active_volume_path = File::Spec->join($volume_path, 'Active');
my $archive_volume_path = File::Spec->join($volume_path, 'Archive');

Genome::Sys->create_directory(File::Spec->join($active_volume_path, $group->subdirectory));
Genome::Sys->create_directory(File::Spec->join($archive_volume_path, $group->subdirectory));

my $volume = Genome::Disk::Volume->create(
    hostname => 'test',
    physical_path => 'test',
    mount_path => $active_volume_path,
    disk_status => 'active',
    can_allocate => 1,
    total_kb => Filesys::Df::df($active_volume_path)->{blocks},
);
ok($volume, 'created test volume');

my $assignment = Genome::Disk::Assignment->create(
    group => $group,
    volume => $volume,
);
ok($assignment, 'added volume to test group successfully');
Genome::Sys->create_directory(File::Spec->join($active_volume_path, $group->subdirectory));
Genome::Sys->create_directory(File::Spec->join($archive_volume_path, $group->subdirectory));

my $allocation_creator = sub {
    my $allocation_path = tempdir(
        "allocation_test_1_XXXXXX",
        CLEANUP => 1,
        UNLINK => 1,
    );
    my $allocation = Genome::Disk::Allocation->create(
        disk_group_name => $group->disk_group_name,
        allocation_path => $allocation_path,
        kilobytes_requested => 100,
        owner_class_name => 'UR::Value',
        owner_id => 'test',
        mount_path => $volume->mount_path,
    );
    ok($allocation, 'created test allocation');
    system("touch " . $allocation->absolute_path . "/a.out");

    return $allocation;
};

subtest 'call archive command with allocation' => sub {
    my $allocation = $allocation_creator->();

    # Create command object and execute it
    my $cmd = Genome::Disk::Command::Allocation::Archive->create(
        allocations => [$allocation],
    );
    ok($cmd, 'created archive command');
    ok($cmd->execute, 'successfully executed archive command');
    ok(-e $allocation->archive_path, 'allocation moved to archive volume');
    ok($allocation->is_archived, 'allocation is now archived');
};

subtest 'call archive command with allocation from command line' => sub {
    my $allocation = $allocation_creator->();

    # Now simulate the command being run from the CLI
    my @args = ($allocation->id);
    my $rv = Genome::Disk::Command::Allocation::Archive->_execute_with_shell_params_and_return_exit_code(@args);
    ok($rv == 0, 'successfully executed command using simulated command line arguments');
    ok(-e $allocation->archive_path, 'allocation moved to archive volume');
};

subtest 'call archive command with path from command line' => sub {
    my $allocation = $allocation_creator->();

    my $rv = Genome::Disk::Command::Allocation::Archive->_execute_with_shell_params_and_return_exit_code(
        $allocation->absolute_path . '/a.out',
    );
    is($rv, 0, 'successfully executed command using path command line argument');
    ok(-e $allocation->archive_path, 'allocation moved to archive volume');
    ok($allocation->is_archived, 'allocation is now archived');
};

done_testing();

1;
