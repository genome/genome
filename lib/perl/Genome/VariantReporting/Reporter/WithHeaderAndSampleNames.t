#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Sub::Override;

my $pkg = 'Genome::VariantReporting::Framework::Test::WithHeaderAndSampleNamesReporter';
use_ok($pkg);

my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('reporters', $pkg->name), $pkg);

my $reporter = $pkg->create(file_name => 'simple', sample_names => ['S1', 'S2']);
ok($reporter, "Reporter created successfully");

my $interpreter = Genome::VariantReporting::Framework::Test::WithManySampleNamesInterpreter->create(sample_names => ['S1', 'S2']);
$reporter->add_interpreter_objects($interpreter);

lives_ok(sub {$reporter->validate}, "Reporter validates correctly");

my $override = Sub::Override->new('Genome::VariantReporting::Reporter::WithHeader::write_legend_file', sub {return 1});

my $output_dir = Genome::Sys->create_temp_directory();
$reporter->initialize($output_dir);

$override->restore;

my %expected_available_fields_dict = (
    S1_info => {
        interpreter => '__with_many_sample_names__',
        field => 'S1_info',
    },
    S2_info => {
        interpreter => '__with_many_sample_names__',
        field => 'S2_info',
    }
);

my @expected_interpreter_fields = qw/S1_info S2_info/;

is_deeply({$reporter->available_fields_dict()}, \%expected_available_fields_dict, "Available fields dictionary as expected");
is_deeply([$reporter->available_fields_for_interpreter($interpreter)], \@expected_interpreter_fields, "Interpreter fields as expected");

done_testing;
