#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Utility::Test qw(compare_ok);
use Sub::Override;

my $pkg = 'Genome::VariantReporting::Reporter::TumorOnlyReporter';
use_ok($pkg);

my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('reporters', $pkg->name), $pkg);

my $data_dir = __FILE__.".d";

my $reporter = $pkg->create(file_name => 'tumor-only');
ok($reporter, "Reporter created successfully");

my $position_interpreter = Genome::VariantReporting::Generic::PositionInterpreter->create();
my $vep_interpreter = Genome::VariantReporting::Suite::Vep::VepInterpreter->create();
my $rsid_interpreter = Genome::VariantReporting::Generic::RsidInterpreter->create();
my $caf_interpreter = Genome::VariantReporting::Suite::Joinx::Dbsnp::CafInterpreter->create();
my $nhlbi_interpreter = Genome::VariantReporting::Suite::Joinx::Nhlbi::MafInterpreter->create();
my $vaf_interpreter = Genome::VariantReporting::Suite::BamReadcount::VafInterpreter->create();
my $thousand_interpreter = Genome::VariantReporting::Suite::Joinx::ThousandGenomes::AfInterpreter->create();
$reporter->add_interpreter_objects($position_interpreter, $vep_interpreter, $rsid_interpreter, $caf_interpreter, $nhlbi_interpreter, $vaf_interpreter, $thousand_interpreter);

my $override = Sub::Override->new('Genome::VariantReporting::Reporter::WithHeader::write_legend_file', sub {return 1});

my $output_dir = Genome::Sys->create_temp_directory();
$reporter->initialize($output_dir);

$override->restore;

my %interpretations = (
    'position' => {
        T => {
            chromosome_name => 1,
            start => 1,
            stop => 1,
            reference => 'A',
            variant => 'T',
        },
        G => {
            chromosome_name => 1,
            start => 1,
            stop => 1,
            reference => 'A',
            variant => 'G',
        },
    },
    'vep' => {
        T => {
            transcript_name   => 'ENST00000452176',
            trv_type          => 'DOWNSTREAM',
            amino_acid_change => '',
            default_gene_name => 'RP5-857K21.5',
            ensembl_gene_id   => 'ENSG00000223659',
            gene_name_source  => 'HGNC',
            c_position        => 'c.456',
            canonical         => 1,
            sift              => 'deleterious(5.4)',
        },
        G => {
            transcript_name   => 'ENST00000452176',
            trv_type          => 'DOWNSTREAM',
            amino_acid_change => '',
            default_gene_name => 'RP5-857K22.5',
            ensembl_gene_id   => 'ENSG00000223695',
            gene_name_source  => 'HGNC',
            c_position        => 'c.456',
            canonical         => 1,
        },
    },
    'rsid' => {
        T => {
            rsid => "rs1",
        },
        G => {
            rsid => "rs1",
        },
    },
    'caf' => {
        T => {
            caf => ".1",
        },
        G => {
            caf => ".1",
        },
    },
    'nhlbi' => {
        T => {
            All_MAF => "0.1",
            EU_MAF => "0.1",
            AA_MAF => "0.3",
        },
        G => {
            All_MAF => "0.1",
            EU_MAF => "0.1",
            AA_MAF => "0.3",
        },
    },
    '1kg' => {
        T => {
            '1kg-af' => 0.001,
        },
        G => {
            '1kg-af' => 0.001,
        },
    },
    'vaf' => {
        T => {
            vaf => "30",
            ref_count => 0,
            var_count => 200,
        },
        G => {
            vaf => "70",
            ref_count => 0,
            var_count => 1000,
        },
    },
);

$reporter->report(\%interpretations);
$reporter->finalize();

compare_ok(File::Spec->join($output_dir, 'tumor-only'), File::Spec->join($data_dir, "expected.out"), "Output as expected");
done_testing;
