#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Basename qw(basename);
use Genome::Utility::Test qw(compare_ok);
use Genome::VariantReporting::Framework::Plan::TestHelpers;

my $pkg = "Genome::VariantReporting::Framework::ReportGenerator";

use_ok($pkg);

my $data_dir = __FILE__.".d";
my $vcf_file = File::Spec->join($data_dir, "test.vcf");
my $plan = Genome::VariantReporting::Framework::Plan::MasterPlan->create_from_file(File::Spec->join($data_dir, "test.yaml"));

my $output_dir = Genome::Sys->create_temp_directory;

my $translations = { untranslated => 'translated'};
my $generator = $pkg->create(input_vcf => $vcf_file,
                             plan_json => $plan->as_json,
                             variant_type => "snvs",
                             output_directory => $output_dir,
                             translations => $translations);
ok($generator->isa($pkg), "Generator created ok");
ok($generator->execute, "Generator executed ok");

my ($epsilon_reporter_object) = grep {$_->isa('Genome::VariantReporting::TestEpsilonReporter')} map {$_->reporter} $generator->entry_processors;
my $translated_interpreter = $epsilon_reporter_object->interpreters->{interpreter_z};
is($translated_interpreter->iz_p1, 'translated', 'Attached interpreter\'s parameters were translated correctly');

for my $expected_report (glob File::Spec->join($data_dir, "expected", "*")) {
    compare_ok(File::Spec->join($output_dir, basename($expected_report)), 
                    $expected_report,
                    sprintf("Report %s generated as expected", basename($expected_report)));
}
done_testing;

