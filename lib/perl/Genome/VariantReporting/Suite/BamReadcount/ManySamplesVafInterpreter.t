#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;
use Genome::VariantReporting::Suite::BamReadcount::TestHelper qw(
    bam_readcount_line create_entry bam_readcount_line_deletion create_deletion_entry);

my $pkg = 'Genome::VariantReporting::Suite::BamReadcount::ManySamplesVafInterpreter';
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

subtest "one alt allele" => sub {
    my $interpreter = $pkg->create(
        sample_names => ["S1", "S2", "S3"]
    );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected = (
        G => {
            S1_vaf => 99.1279069767442,
            S1_ref_count => 3,
            S1_var_count => 341,
            S1_per_library_var_count => 'Solexa-135852:155,Solexa-135853:186',
            S1_per_library_ref_count => 'Solexa-135852:2,Solexa-135853:1',
            S1_per_library_vaf => 'Solexa-135852:45.0581395348837,Solexa-135853:54.0697674418605',
            S2_vaf => 99.1279069767442,
            S2_ref_count => 3,
            S2_var_count => 341,
            S2_per_library_var_count => 'Solexa-135852:155,Solexa-135853:186',
            S2_per_library_ref_count => 'Solexa-135852:2,Solexa-135853:1',
            S2_per_library_vaf => 'Solexa-135852:45.0581395348837,Solexa-135853:54.0697674418605',
            S3_vaf => 99.1279069767442,
            S3_ref_count => 3,
            S3_var_count => 341,
            S3_per_library_var_count => 'Solexa-135852:155,Solexa-135853:186',
            S3_per_library_ref_count => 'Solexa-135852:2,Solexa-135853:1',
            S3_per_library_vaf => 'Solexa-135852:45.0581395348837,Solexa-135853:54.0697674418605',
        }
    );

    my $entry = create_entry(bam_readcount_line);
    my %result = $interpreter->interpret_entry($entry, ['G']);
    is(keys %result, keys %expected, "First level keys as expected");
    is_deeply(\%result, \%expected, "Values are as expected");
    cmp_ok($result{G}->{S1_vaf}, ">", 99, 'vaf is in the desired range');
    cmp_ok($result{G}->{S1_vaf},  "<", 100, 'vaf is in the desired range');
    is($interpreter->available_fields, keys %{$expected{G}}, 'Available fields as expected');
};

done_testing;
