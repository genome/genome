#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above "Genome";

require Cwd;
use Data::Dumper;
require Digest::MD5;
require File::Spec;
require Genome::Utility::Test;
use Test::More;
use Test::Exception;

use_ok('Genome::InstrumentData::Command::Import::Manager') or die;

my $cwd = Cwd::getcwd();
my $data_dir = Genome::Utility::Test->data_dir_ok('Genome::InstrumentData::Command::Import', 'generate-cmds');
my $input_file = File::Spec->join($data_dir, 'info.tsv');
chdir $data_dir;

my $analysis_project = Genome::Config::AnalysisProject->create(name => '__TEST_AP__');
ok($analysis_project, 'create analysis project');

# Library needed
my $manager = Genome::InstrumentData::Command::Import::Manager->create(
    analysis_project => $analysis_project,
    file => $input_file,
    list_config => "printf %s NOTHING_TO_SEE_HERE;1;2",
    launch_config => "echo %{job_name} LAUNCH!",
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');

my $imports_aryref = $manager->_imports;
is_deeply([ map { $_->{status} } @$imports_aryref ], [qw/ no_library no_library no_library no_library /], 'imports aryref status');
is_deeply([ map { $_->{library}->{name} } @$imports_aryref ], [qw/ TeSt-0000-00-extlibs TeSt-0000-00-extlibs TeSt-0000-01-extlibs TeSt-0000-01-extlibs /], 'imports aryref library_name');
is_deeply([ map { $_->{job_name} } @$imports_aryref ], [qw/ ed08e9 459d6a 8245b4 640f80 /], 'imports aryref job_name');
is_deeply([ map { $_->{library_cnt} } @$imports_aryref ], [qw/ 0 0 0 0 /], 'imports aryref library_cnt');
ok(!grep({ $_->{job_status} } @$imports_aryref), 'imports aryref does not have job_status');
ok(!grep({ $_->{instrument_data} } @$imports_aryref), 'imports aryref does not have instrument_data');

# Define libraries
my $base_sample_name = 'TeSt-0000-0';
my @libraries;
for (0..1) { 
    push @libraries, Genome::Library->__define__(
        id => -222 + $_,
        name => $base_sample_name.$_.'-extlibs',
        sample => Genome::Sample->__define__(
            id => -111 + $_,
            name => $base_sample_name.$_,
            nomenclature => 'TeSt',
        ),
    );
}
is(@libraries, 2, 'define 2 libraries');

# Import needed
$manager = Genome::InstrumentData::Command::Import::Manager->create(
    analysis_project => $analysis_project,
    file => $input_file,
    list_config => "printf %s NOTHING_TO_SEE_HERE;1;2",
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');

$imports_aryref = $manager->_imports;
is_deeply([ map { $_->{status} } @$imports_aryref ], [qw/ needed needed needed needed /], 'imports aryref status');
is_deeply([ map { $_->{library_cnt} } @$imports_aryref ], [qw/ 1 1 1 1 /], 'imports aryref library_cnt');
ok(!grep({ $_->{job_status} } @$imports_aryref), 'imports aryref does not have job_status');
ok(!grep({ $_->{instrument_data} } @$imports_aryref), 'imports aryref does not have instrument_data');

is($manager->_list_command, 'printf %s NOTHING_TO_SEE_HERE', '_list_command');
is($manager->_list_job_name_column, 0, '_list_job_name_column');
is($manager->_list_status_column, 1, '_list_status_column');

# One has import running, others are needed
$manager = Genome::InstrumentData::Command::Import::Manager->create(
    analysis_project => $analysis_project,
    file => $input_file,
    list_config => 'printf "%s %s\\n%s %s\\n%s %s\\n%s %s" ed08e9 pend 459d6a run 8245b4 run 640f80 pend;1;2',
    launch_config => "echo %{job_name} LAUNCH!",
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');

$imports_aryref = $manager->_imports;
is_deeply([ map { $_->{status} } @$imports_aryref ], [qw/ pend run run pend /], 'imports aryref status');
is_deeply([ map { $_->{job_status} } @$imports_aryref ], [qw/ pend run run pend /], 'imports aryref job_status');
ok(!grep({ $_->{instrument_data} } @$imports_aryref), 'imports aryref does not have instrument_data');

# Create inst data
my @inst_data;
for my $import ( @$imports_aryref ) {
    my $inst_data = Genome::InstrumentData::Imported->__define__(
        original_data_path => $import->{instdata}->{source_files},
        library => Genome::Library->get(name => $import->{library}->{name}),
        subset_name => '1-XXXXXX',
        sequencing_platform => 'solexa',
        import_format => 'bam',
        description => 'import test',
    );
    $inst_data->add_attribute(attribute_label => 'bam_path', attribute_value => $input_file);
    my $downsample_ratio = $import->{instdata}->{downsample_ratio};
    $inst_data->add_attribute(attribute_label => 'downsample_ratio', attribute_value => $downsample_ratio) if $downsample_ratio;
    push @inst_data, $inst_data;
}
is(@inst_data, 4, 'define 4 inst data');

# Fake successful imports by pointing bam_path to existing source_files.tsv
$manager = Genome::InstrumentData::Command::Import::Manager->create(
    analysis_project => $analysis_project,
    file => $input_file,
    list_config => "printf %s NOTHING_TO_SEE_HERE;1;2",
    launch_config => "echo %{job_name} LAUNCH! GTMP=%{gtmp} MTMP=%{mtmp} KBTMP=%{kbtmp}", # successful imports, will not launch
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');

$imports_aryref = $manager->_imports;
is_deeply([ map { $_->{status} } @$imports_aryref ], [qw/ success success success success /], 'imports aryref status');
is_deeply([ sort { $a->id cmp $b->id } map { @{$_->{instrument_data}} } @$imports_aryref ], [ sort { $a->id cmp $b->id } @inst_data], 'imports aryref instrument_data');
ok(!grep({ $_->{job_status} } @$imports_aryref), 'imports aryref does not have job_status');

is_deeply(
    [ map { $manager->_resolve_launch_command_for_import($_) } @$imports_aryref ],
    [
    "echo ed08e9 LAUNCH! GTMP=1 MTMP=1024 KBTMP=1048576 genome instrument-data import basic --library name=TeSt-0000-00-extlibs --source-files bam1.bam --import-source-name 'TeSt' --instrument-data-properties lane='8' --analysis-project id=".$analysis_project->id,
    "echo 459d6a LAUNCH! GTMP=1 MTMP=1024 KBTMP=1048576 genome instrument-data import basic --library name=TeSt-0000-00-extlibs --source-files bam2.bam --import-source-name 'TeSt' --instrument-data-properties lane='8' --analysis-project id=".$analysis_project->id,
    "echo 8245b4 LAUNCH! GTMP=1 MTMP=1024 KBTMP=1048576 genome instrument-data import basic --library name=TeSt-0000-01-extlibs --source-files bam3.bam --import-source-name 'TeSt' --instrument-data-properties lane='7' --analysis-project id=".$analysis_project->id. ' --downsample-ratio .25',
    "echo 640f80 LAUNCH! GTMP=1 MTMP=1024 KBTMP=1048576 genome instrument-data import basic --library name=TeSt-0000-01-extlibs --source-files bam3.bam --import-source-name 'TeSt' --instrument-data-properties lane='7' --analysis-project id=".$analysis_project->id. ' --downsample-ratio .1',
    ],
    'launch commands',
);

# fail - source file does not exist
throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Manager->execute(
            analysis_project => $analysis_project,
            file => File::Spec->join($data_dir, 'source-file-does-not-exist.tsv'),
        );
    },
    qr/is empty\!/,
    'execute failed w/ non existing source file',
);

# fail - invalid list config
throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Manager->execute(
            analysis_project => $analysis_project,
            file => $input_file,
            list_config => 'INVALID',
        );
    },
    qr/Missing job_name_column in list config: INVALID/,
    'execute failed w/ invalid list config',
);

chdir $cwd;
done_testing();
