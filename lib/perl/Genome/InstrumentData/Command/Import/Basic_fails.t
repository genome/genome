#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above "Genome";

require Genome::Utility::Test;
require File::Spec;
use Test::Exception;
use Test::More;

use_ok('Genome::InstrumentData::Command::Import::Basic') or die;

my $analysis_project = Genome::Config::AnalysisProject->create(name => '__TEST_AP__');
ok($analysis_project, 'create analysis project');
my $library = Genome::Library->create(
    name => '__TEST_SAMPLE__-extlibs', sample => Genome::Sample->create(name => '__TEST_SAMPLE__')
);
ok($library, 'Create library');

my $test_dir = Genome::Utility::Test->data_dir_ok('Genome::InstrumentData::Command::Import', 'v02') or die;

my $environment_file = $test_dir .'/config.yml';
my $add_env_cmd = Genome::Config::AnalysisProject::Command::AddEnvironmentFile->create(
   analysis_project => $analysis_project,
   environment_file => $environment_file,
);
ok($add_env_cmd, 'Add ENV command.');
ok($add_env_cmd->execute, 'Execute Add ENV command'); 

my $source_file = File::Spec->join($test_dir, 'input.bam');

throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Basic->execute(
            analysis_project => $analysis_project,
            library => $library,
            source_files => [ 'blah.fastq' ],
            import_source_name => 'broad',
            instrument_data_properties => [qw/ sequencing_platform=solexa lane=2 flow_cell_id=XXXXXX /],
        );
    },
    qr/Source file does not have any size\! blah\.fastq/,
    'Fails w/ invalid files',
);

throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Basic->execute(
            analysis_project => $analysis_project,
            library => $library,
            source_files => [ 'blah' ],
            import_source_name => 'broad',
            instrument_data_properties => [qw/ sequencing_platform=solexa lane=2 flow_cell_id=XXXXXX /],
        );
    },
    qr/Unrecognized source file format! blah/,
    'Fails w/ unknown format',
);

throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Basic->execute(
            analysis_project => $analysis_project,
            library => $library,
            source_files => [ $source_file ],
            import_source_name => 'broad',
            instrument_data_properties => [qw/ sequencing_platform=solexa lane= flow_cell_id=XXXXXX /],
        );
    },
    qr#Failed to parse with instrument data property label/value! lane=#,
    'Fails w/ invalid instrument_data_properties',
);

throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Basic->execute(
            analysis_project => $analysis_project,
            library => $library,
            source_files => [ $source_file ],
            import_source_name => 'broad',
            instrument_data_properties => [qw/ sequencing_platform=solexa lane=2 lane=3 flow_cell_id=XXXXXX /],
        );
    },
    qr/Multiple values for instrument data property! lane => 2, 3/,
    'Fails w/ invalid instrument_data_properties',
);

throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Basic->execute(
            analysis_project => $analysis_project,
            library => $library,
            source_files => [ $source_file ],
            import_source_name => 'broad',
            downsample_ratio => 0.25,
            instrument_data_properties => [qw/ downsample_ratio=0.24 /],
        );
    },
    qr//,
    'Fails w/ conflicting cmd and instdata properties',
);

my $inst_data = Genome::InstrumentData::Imported->create(
    library => $library,
    original_data_path => $source_file,
);
is($inst_data->original_data_path, $source_file, 'set original_data_path on instdata');
throws_ok(
    sub{
        Genome::InstrumentData::Command::Import::Basic->execute(
            analysis_project => $analysis_project,
            library => $library,
            source_files => [ $source_file ],
            import_source_name => 'broad',
            instrument_data_properties => [qw/ sequencing_platform=solexa lane=2 flow_cell_id=XXXXXX /],
        );
    },
    qr#Cannot reimport!#,
    "Failed to reimport",
);

done_testing();
